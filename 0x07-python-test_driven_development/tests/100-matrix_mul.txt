>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[5,6,7], "98"], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists
>>> matrix_mul([[1, 2], [3, 4]], [[5,6,7], "98"])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists
>>> matrix_mul([4,5,6,8], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists
>>> matrix_mul([[1, 2], [3, 4]], [8,9,6,5,4])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists
>>> matrix_mul([], [[8,9],[6,5]])
Traceback (most recent call last):
...
TypeError: m_a can't be empty
>>> matrix_mul([[8,9],[5,4]], [])
Traceback (most recent call last):
...
TypeError: m_b can't be empty
>>> matrix_mul([["9", 2], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats
>>> matrix_mul([[9, 2], [3, 4]], [[1, 2], ["3", 4]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats
>>> matrix_mul(matrix_mul([[2], [3, 4]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size
>>> matrix_mul(matrix_mul([[2, 9], [3, 4]], [[1, 2, 0], [3, 4]]))
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size
>>> matrix_mul([[2,6,5], [3, 4,6],[5, 7, 9]], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied
>>> matrix_mul([[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'
>>> matrix_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


